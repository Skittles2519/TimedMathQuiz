<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="timer1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AABJRU5ErkJggg==
</value>
  </data>
</root>